package com.baeldung.ls.project.database.impl;

import com.baeldung.ls.project.database.ProjectJdbcTemplateRepository;
import com.baeldung.ls.project.domain.ProjectJdbc;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.util.Optional;

@Repository
public class ProjectJdbcTemplateRepositoryImpl implements ProjectJdbcTemplateRepository {

    private final JdbcTemplate jdbcTemplate;

    public ProjectJdbcTemplateRepositoryImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public Optional<ProjectJdbc> findById(Long id) {

        return jdbcTemplate.query("SELECT id, name, date_created from projectjdbc where id = ?", (resultSet, rowNum) ->
                new ProjectJdbc(resultSet.getLong("id"),
                        resultSet.getString("name"),
                        resultSet.getDate("date_created")
                .toLocalDate()), id).stream().findAny();
    }

    @Override
    public ProjectJdbc save(ProjectJdbc project) {
        KeyHolder keyHolder = new GeneratedKeyHolder();

        this.jdbcTemplate.update(connection -> {
            PreparedStatement statement = connection.prepareStatement("INSERT into projectjdbc (name, date_created) values (?, ?)", new String[] { "id" });
            statement.setString(1, project.getName());
            statement.setDate(2, Date.valueOf(project.getDateCreated()));
            return statement;
        }, keyHolder);
        long autogeneratedId = keyHolder.getKey().longValue();
        return this.findById(autogeneratedId).get();
    }
}
